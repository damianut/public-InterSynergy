<?php

/**
 * This file is part of InterSynergy Project
 *
 * (c) Damian Orzeszek <damianas1999@gmail.com>
 */

namespace App\Services\Validation;

use Symfony\Component\Validator\Constraints as Asserts;
use Symfony\Component\Validator\Validation;

/**
 * Result of validation can obtains from `$message` property.
 */
class ValidationCustom
{
  /**
   * Returned message with detected violations.
   * 
   * @var string
   */
  private $message;

  /**
   * Validator
   * 
   * @var Validation
   */
  private $validator;

  public function __construct()
  {
    $this->message = '';
    $this->validator = Validation::createValidator();
  }

  /**
   * Creating message with detected violations
   * 
   * @param array $violations Array with messages about violations
   */
  private function createMessage($violations)
  {
    if (0 != count($violations)) {
      foreach ($violations as $violation) {
        $this->message .= $violation->getMessage() . "\n";
      }
    }
  }

  /**
   * Validate email
   * 
   * @param string $email Email to validate
   */
  public function validateEmail($email)
  {
    $violations = $this->validator->validate($email, [
        new Asserts\NotBlank([
            'message' => 'Nie podano adresu e-mail.',
        ]),
        new Asserts\Email([
            'mode' => 'strict',
            'message' => 'Podany e-mail ma niepoprawny format.',
        ]),
    ]);
    $this->createMessage($violations);
  }

  /**
   * Validate password
   * 
   * @param string $password Password to validate
   */
  public function validatePassword($password)
  {
    $violations = $this->validator->validate(
        $password,
        [
            new Asserts\NotBlank([
                'message' => 'Hasło nie może być puste.',
            ]),
            new Asserts\Length([
                'min' => 8,
                'minMessage' =>
                    'Hasło jest za krótkie. Ma zawierać przynajmniej 8 znaków.',
            ]),
            new Asserts\Regex([
                'pattern' => '/^\w+$/',
                'htmlPattern' => false,
                'message' =>
                    'Hasło może składać się tylko z cyfr, liter i znaku "_".',
            ]),
        ]
    );
    $this->createMessage($violations);
  }

  /**
   * Validate Uuid generated by `Ramsey\Uuid\Uuid:uuid4()`
   * 
   * @param Uuid $uuid Uuid token to validate
   */
  public function validateUuid($uuid)
  {
    $violations = $this->validator->validate($uuid, [
        new Asserts\NotBlank([
            'message' => 'Token nie może być pusty.',
        ]),
        new Asserts\Uuid([
            'message' => 'Nieprawidłowy token',
            'versions' => [4],
        ]),
    ]);
    $this->createMessage($violations);
  }

  /**
   * Validate messages created after registering, activating account etc.
   * Check that somebody passed dangerous data by $_GET['registerMessage'].
   * 
   * @param string $message Message to validate
   * 
   * @return string         Original or erased message
   */
  public function validateMessage($message): string
  {
    $violations = $this->validator->validate($message, [
        new Asserts\NotBlank([
            'message' => 'Wiadomość nie może być pusta.',
        ]),
        new Asserts\Regex([
            'pattern' =>
                '/^[\w\!\,\.\-\;\:\(\)\%\sĄąĆćĘęŁłŃńÓóŚśŹźŻż\\\\]+$/',
            'htmlPattern' => false,
        ]),
    ]);
    if (0 != count($violations)) {
      $this->createMessage($violations);
      $message = '';
    }
    
    return $message;
  }
  
  /**
   * Return message with detected violations
   * 
   * @return string Message
   */
  public function returnMessage(): string
  {
    return $this->message;
  }
}
/*............................................................................*/
